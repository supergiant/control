#cloud-config

hostname: "{{ .Name }}"
ssh_authorized_keys:
  - "{{ .Kube.SSHPubKey }}"
write_files:
  - path: "/opt/bin/download-k8s-binary"
    permissions: "0755"
    content: |
      #!/bin/bash
      source /etc/environment
      K8S_VERSION=v{{ .Kube.KubernetesVersion }}
      mkdir -p /opt/bin
      mkdir /etc/multipath/
      touch /etc/multipath/bindings
      curl -sSL -o /opt/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/${K8S_VERSION}/bin/linux/amd64/kubectl
      chmod +x /opt/bin/$FILE
      chmod +x /opt/bin/kubectl

      curl -sSL -o /opt/bin/cni.tar.gz https://storage.googleapis.com/kubernetes-release/network-plugins/cni-07a8a28637e97b22eb8dfe710eeae1344f69d16e.tar.gz
      tar xzf "/opt/bin/cni.tar.gz" -C "/opt/bin" --overwrite
      mv /opt/bin/bin/* /opt/bin
      rm -r /opt/bin/bin/
      rm -f "/opt/bin/cni.tar.gz"

      cd /opt/bin/
      git clone https://github.com/packethost/packet-block-storage.git
      cd packet-block-storage
      chmod 755 ./*
      /opt/bin/packet-block-storage/packet-block-storage-attach

      cd /tmp
      wget https://github.com/digitalocean/doctl/releases/download/v1.4.0/doctl-1.4.0-linux-amd64.tar.gz
      tar xf /tmp/doctl-1.4.0-linux-amd64.tar.gz
      sudo mv /tmp/doctl /opt/bin/
      sudo mkdir -p /root/.config/doctl/
      sudo touch /root/.config/doctl/config.yaml
  - path: "/etc/kubernetes/manifests/kube-proxy.yaml"
    permissions: "0644"
    owner: "root"
    content: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: kube-proxy
        namespace: kube-system
      spec:
        hostNetwork: true
        containers:
        - name: kube-proxy
          image: gcr.io/google_containers/hyperkube:v{{ .Kube.KubernetesVersion }}
          command:
          - /hyperkube
          - proxy
          - --master=https://{{ .Kube.MasterPrivateIP }}
          - --kubeconfig=/etc/kubernetes/worker-kubeconfig.yaml
          - --proxy-mode=iptables
          securityContext:
            privileged: true
          volumeMounts:
            - mountPath: /etc/ssl/certs
              name: "ssl-certs"
            - mountPath: /etc/kubernetes/worker-kubeconfig.yaml
              name: "kubeconfig"
              readOnly: true
            - mountPath: /etc/kubernetes/ssl
              name: "etc-kube-ssl"
              readOnly: true
        volumes:
          - name: "ssl-certs"
            hostPath:
              path: "/usr/share/ca-certificates"
          - name: "kubeconfig"
            hostPath:
              path: "/etc/kubernetes/worker-kubeconfig.yaml"
          - name: "etc-kube-ssl"
            hostPath:
              path: "/etc/kubernetes/ssl"
{{- .Kube.CustomFiles }}
  - path: "/etc/kubernetes/worker-kubeconfig.yaml"
    permissions: "0644"
    owner: "root"
    content: |
      apiVersion: v1
      kind: Config
      users:
      - name: kubelet
        user:
          token: {{ .Kube.Password }}
      clusters:
      - name: local
        cluster:
           insecure-skip-tls-verify: true
      contexts:
      - context:
          cluster: local
          user: kubelet
        name: service-account-context
      current-context: service-account-context
coreos:
  update:
    reboot-strategy: off
  flannel:
    iface: $COREOS_PRIVATE_IPV4
    etcd_endpoints: http://{{ .Kube.MasterPrivateIP }}:2379

  units:
    - name: "flanneld.service"
      command: start
      drop-ins:
        - name: 50-network-config.conf
          content: |
            [Unit]
            Requires=etcd2.service
            [Service]
            ExecStartPre=/usr/bin/etcdctl set /coreos.com/network/config '{"Network":"10.2.0.0/16", "Backend": {"Type": "vxlan"}}'
    - name: "docker.service"
      command: start
      drop-ins:
        - name: 40-flannel.conf
          content: |
            [Unit]
            Requires=flanneld.service
            After=flanneld.service
{{- .Kube.ServiceString }}
    - name: iscsid.service
      enable: true
      command: start
    - name: kubelet.service
      command: start
      content: |
        # /usr/lib64/systemd/system/kubelet.service
        [Unit]
        Description=Kubernetes Kubelet
        [Service]
        Environment=KUBELET_VERSION=v{{ .Kube.KubernetesVersion }}_coreos.0
        Environment="RKT_RUN_ARGS=--volume iscsiadm,kind=host,source=/usr/sbin/iscsiadm \
          --mount volume=iscsiadm,target=/usr/sbin/iscsiadm \
          --volume multipathcmd,kind=host,source=/usr/sbin/multipath \
          --mount volume=multipathcmd,target=/usr/sbin/multipath \
          --volume multipath,kind=host,source=/etc/multipath/ \
          --mount volume=multipath,target=/etc/multipath/ \
          --volume packet,kind=host,source=/opt/bin/packet-block-storage/ \
          --mount volume=packet,target=/opt/bin/packet-block-storage/ \
          --volume doconfig,kind=host,source=/root/.config/doctl/config.yaml \
          --mount volume=doconfig,target=/root/.config/doctl/config.yaml \
          --volume log,kind=host,source=/var/log/ \
          --mount volume=log,target=/var/log/ \
          --uuid-file-save=/var/run/kubelet-pod.uuid"
        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/run/kubelet-pod.uuid
        ExecStartPre=/bin/bash -c "/opt/bin/download-k8s-binary kubelet"
        ExecStart=/usr/lib/coreos/kubelet-wrapper \
          --allow-privileged=true \
          --max-pods 1000 \
          --api_servers=https://{{ .Kube.MasterPrivateIP }} \
          --cluster-dns=10.3.0.10 \
          --cluster_domain=cluster.local \
          --pod-manifest-path=/etc/kubernetes/manifests \
          --kubeconfig=/etc/kubernetes/worker-kubeconfig.yaml \
          --volume-plugin-dir=/etc/kubernetes/volumeplugins \
          {{- .Kube.KubeProviderString }}
          --register-node=true
        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/run/kubelet-pod.uuid
        Restart=on-failure
        TimeoutSec=300
        RestartSec=5
        [Install]
        WantedBy=multi-user.target
