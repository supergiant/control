#cloud-config

hostname: "{{ .Name }}"
ssh_authorized_keys:
  - "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/ic6lnwssBUhZglfDq58MBd8YKLJOiegoQg6rmg6NgDq2PzVTpSE1UFvMqTyjoK8/ReKviKhlSbbQ8ryOLykbPYYOI3ZTix4GhNUq0NXeyJwA6Mvp/tBJCszvYKIuQIQj9QNKSUNUNuCqBLK3ozQYS4xGewYOmA2A2HqXdXbSl0mZ7W5P4osj+9UBlzOBae6GIdEhriU64jSJASnpvgpGJ4SGopoYNOUZIZEHyWveuAC/gjPlwPhUNbXA8E+vpaGwjTPoWQV6HDAKvmuieOSz/DBFJUyMQIA6Scki4zkAhfLP1xEJOy+KfzObOWko1hKEj+yt8T22z2J4ILnp1aULymI2klZKkxyLCTa2GiTrdG22U2qB0GTZleXH4FP1X8Y9P+NYySSRDqMYcSmJn6O85F+slephnb9TWEZTkhnSdysIOg4lU/zsNkplrrWDZkaBlTufXGs+OHvy0Xl5UP4/WREYqkXPF0nUDSAbBxWKD5i7iTM6GFW6tBXkOVnkeVRTkfnhwEZRkxMT7RXf1xeHfAp4oSsOuvkcWkVG4p6O3wX0ZOGCFp4VODcArI969URhJeHAYkV+zdCqQNUpyk79se+cIVzCy2VuhGGkTr+7ap1OjnOkkBJLCSF4GpCqpz7Fd+HAS+NXW37k0Tp+YO1EecVVBr8jmRWjcreZcY+VVw== mike@qbox.io"
  - "ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAupfrq7qdQdhhEpt+cdLvWqHHZdOVyrDwubt7yX/AW4lRk5/GE1isqMnNknv2dl2rOuEkG9HcWEfgU1ePHPg9mfRize+UFqSY8DWPiEQy5ZPfluuSN3K1LKBuXuzbr/OKuQ+voLIomhiJeS6R5h7LmR2O8MSrlYzQA3o92k8udBdkg2TLoW8Mz1rc9+MF4ZKK4PEe9dSzEk3Qxtw+QfOtycB/iTnLZ7SZYPDz0NTHuZ4mfH67bD1wR503k8+l0jmzcSyhbe/jFDXH/HlPQi6249LYf4uy6TekdjmcF6RZ0jNYMNRa357E+ot8DJopIPMs2iCqzn0r0RO0aIM2HCgL4Q== me@jordanrinke.com/me@drrinke.com"
write_files:
  - path: "/opt/docker.service"
    permission: "0755"
    content: |
      [Unit]
      Description=Docker Application Container Engine
      Documentation=https://docs.docker.com
      After=network-online.target docker.socket firewalld.service flanneld.service
      Wants=network-online.target
      Requires=docker.socket

      [Service]
      Type=notify
      # the default is not to use systemd for cgroups because the delegate issues still
      # exists and systemd currently does not support the cgroup feature set required
      # for containers run by docker
      EnvironmentFile=/run/flannel/subnet.env
      ExecStart=/usr/bin/dockerd --bip=${FLANNEL_SUBNET} --mtu=${FLANNEL_MTU} -H fd://
      ExecReload=/bin/kill -s HUP $MAINPID
      LimitNOFILE=1048576
      # Having non-zero Limit*s causes performance problems due to accounting overhead
      # in the kernel. We recommend using cgroups to do container-local accounting.
      LimitNPROC=infinity
      LimitCORE=infinity
      # Uncomment TasksMax if your systemd version supports it.
      # Only systemd 226 and above support this version.
      TasksMax=infinity
      TimeoutStartSec=0
      # set delegate yes so that systemd does not reset the cgroups of docker containers
      Delegate=yes
      # kill only the docker process, not all processes in the cgroup
      KillMode=process
      # restart the docker process if it exits prematurely
      Restart=on-failure
      StartLimitBurst=3
      StartLimitInterval=60s

      [Install]
      WantedBy=multi-user.target

  - path: "/etc/default/flanneld"
    permissions: "0755"
    content: |
      # Flanneld configuration options
      # etcd url location.  Point this to the server where etcd runs
      FLANNEL_ETCD="http://{{ .Kube.MasterPrivateIP }}:2379"
      # etcd config key.  This is the configuration key that flannel queries
      # For address range assignment
      FLANNEL_ETCD_KEY="/coreos.com/network"
      # Any additional options that you want to pass
      FLANNEL_OPTIONS="--iface REPLACEME"
      FLANNEL_ARCH="arm64"

  - path: "/etc/systemd/system/flanneld.service"
    permissions: "0755"
    content: |
      [Unit]
      Description=Flanneld overlay address etcd agent
      After=network.target
      After=network-online.target
      Wants=network-online.target
      Before=docker.service

      [Service]
      Type=notify
      EnvironmentFile=-/etc/default/flanneld
      ExecStart=/usr/bin/flanneld -etcd-endpoints=${FLANNEL_ETCD} -etcd-prefix=${FLANNEL_ETCD_KEY} $FLANNEL_OPTIONS
      Restart=on-failure

      [Install]
      WantedBy=multi-user.target
      RequiredBy=docker.service

  - path: "/opt/bin/download-k8s-binary"
    permissions: "0755"
    content: |
      #!/bin/bash
      source /etc/environment
      K8S_VERSION=v{{ .Kube.KubernetesVersion }}
      mkdir -p /opt/bin >/dev/null 2>&1
      mkdir /etc/multipath/ >/dev/null 2>&1
      touch /etc/multipath/bindings >/dev/null 2>&1
            curl -sSL -o /opt/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/release/v0.0.1.7.0-alpha.0/bin/linux/arm64/kubectl
      chmod +x /opt/bin/$FILE
      chmod +x /opt/bin/kubectl

      curl -sSL -o /opt/bin/cni.tar.gz https://storage.googleapis.com/kubernetes-release/network-plugins/cni-arm64-07a8a28637e97b22eb8dfe710eeae1344f69d16e.tar.gz
      tar xzf "/opt/bin/cni.tar.gz" -C "/opt/bin" --overwrite
      mv /opt/bin/bin/* /opt/bin
      rm -r /opt/bin/bin/
      rm -f "/opt/bin/cni.tar.gz"

      cd /opt/bin/
      git clone https://github.com/packethost/packet-block-storage.git >/dev/null 2>&1
      cd packet-block-storage
      chmod 755 ./*
      /opt/bin/packet-block-storage/packet-block-storage-attach
  - path: "/etc/kubernetes/manifests/kube-proxy.yaml"
    permissions: "0644"
    owner: "root"
    content: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: kube-proxy
        namespace: kube-system
      spec:
        hostNetwork: true
        containers:
        - name: kube-proxy
          image: gcr.io/google-containers/hyperkube-arm64:v{{ .Kube.KubernetesVersion }}
          command:
          - /hyperkube
          - proxy
          - --master=https://{{ .Kube.MasterPrivateIP }}
          - --kubeconfig=/etc/kubernetes/worker-kubeconfig.yaml
          - --proxy-mode=iptables
          securityContext:
            privileged: true
          volumeMounts:
            - mountPath: /etc/ssl/certs
              name: "ssl-certs"
            - mountPath: /etc/kubernetes/worker-kubeconfig.yaml
              name: "kubeconfig"
              readOnly: true
            - mountPath: /etc/kubernetes/ssl
              name: "etc-kube-ssl"
              readOnly: true
        volumes:
          - name: "ssl-certs"
            hostPath:
              path: "/usr/share/ca-certificates"
          - name: "kubeconfig"
            hostPath:
              path: "/etc/kubernetes/worker-kubeconfig.yaml"
          - name: "etc-kube-ssl"
            hostPath:
              path: "/etc/kubernetes/ssl"
  - path: "/etc/kubernetes/worker-kubeconfig.yaml"
    permissions: "0644"
    owner: "root"
    content: |
      apiVersion: v1
      kind: Config
      users:
      - name: kubelet
        user:
          token: {{ .Kube.Password }}
      clusters:
      - name: local
        cluster:
           insecure-skip-tls-verify: true
      contexts:
      - context:
          cluster: local
          user: kubelet
        name: service-account-context
      current-context: service-account-context

  - path: "/etc/systemd/system/kubelet.service"
    permissions: "0755"
    content: |
      [Unit]
      Description=Kubernetes Kubelet Server
      Documentation=https://github.com/kubernetes/kubernetes
      Requires=docker.service network-online.target
      After=docker.service network-online.target

      [Service]
      ExecStartPre=/bin/mkdir -p /var/lib/kubelet
      ExecStartPre=/bin/mount --bind /var/lib/kubelet /var/lib/kubelet
      ExecStartPre=/bin/mount --make-shared /var/lib/kubelet
      ExecStart=/usr/bin/docker run \
              --net=host \
              --pid=host \
              --privileged \
              -v /dev:/dev \
              -v /sys:/sys:ro \
              -v /var/run:/var/run:rw \
              -v /var/lib/docker/:/var/lib/docker:rw \
              -v /var/lib/kubelet/:/var/lib/kubelet:shared \
              -v /var/log:/var/log:shared \
              -v /srv/kubernetes:/srv/kubernetes:ro \
              -v /etc/kubernetes:/etc/kubernetes:ro \
              gcr.io/google-containers/hyperkube-arm64:v{{ .Kube.KubernetesVersion }} \
              /hyperkube kubelet --allow-privileged=true \
              --api_servers=https://{{ .Kube.MasterPrivateIP }} \
              --cluster-dns=10.3.0.10 \
              --max-pods 1000 \
              --cluster_domain=cluster.local \
              --pod-manifest-path=/etc/kubernetes/manifests \
              --kubeconfig=/etc/kubernetes/worker-kubeconfig.yaml \
              --volume-plugin-dir=/etc/kubernetes/volumeplugins \
              --register-node=true
      Restart=always
      StartLimitInterval=0
      RestartSec=10
      KillMode=process

      [Install]
      WantedBy=multi-user.target
runcmd:
  - apt-get update
  - apt-get install -y apt-transport-https ca-certificates curl software-properties-common
  - 'curl -fsSL -o /tmp/key https://download.docker.com/linux/ubuntu/gpg'
  - 'apt-key add /tmp/key'
  - 'add-apt-repository "deb [arch=arm64] https://download.docker.com/linux/ubuntu xenial test"'
  - apt-get update
  - apt-get install -y docker-ce
  - mv /opt/docker.service /lib/systemd/system/docker.service
  - 'wget -P /usr/bin/ https://github.com/coreos/flannel/releases/download/v0.9.0/flanneld-arm64'
  - mv /usr/bin/flanneld-arm64 /usr/bin/flanneld
  - chmod 755 /usr/bin/flanneld
  - sed -i 's/REPLACEME/'`ifconfig|grep "10\."|grep "inet "|cut -f10 -d" "`'/g' /etc/default/flanneld
  - service apparmor stop
  - service apparmor teardown
  - update-rc.d -f apparmor remove
  - systemctl enable flanneld.service
  - systemctl enable docker.service
  - systemctl enable kubelet.service
  - systemctl restart flanneld.service
  - systemctl restart docker.service
  - systemctl restart kubelet.service
  - iptables -P FORWARD ACCEPT
